Part 1
1/ создать проект SlowNews, который состоит из 4-х экранов (страниц): логин, регистрация, новости, архив.
Необходимо придумать дизайн, сверстать его; у каждой новости должна быть картинка, заголовок, тело и кнопка "Сохранить"
в архив. Сделать к следующему занятию страницу Новостей, на которой должна быть настоящая отрисовка информации из сервлета.

файлы создать все (4xJSP, 4xServlet), форвард прописать, html разметку наверстать полностью

т.е. получится 3 страницы, “замоканные” на уровне html (т.е. разметка никакой логикой не управляется вообще) и 1 страница,
замоканная на уровне сервлета (разметка управляется логикой, но сервлет отдает фиктивные данные и сам никуда не обращается).

Part 2
2/ create new jsp-page ("show-users"). Create navigation for this page.
Create server-side logic for create users which autorized.
List<Users> create as singleton.
In servlet realize 2 method for handling GET and POST request.

create handler for registration form.


Part 3
0. Доделать логин/logout.

1.  регистрацию так чтобы хранилась HashSumm пароля, на основе SHA.

2. Написать генератор новостей:
 класс с методом getNews (случайные заголовок + текст)
 Например 10 новостей на страницу.

3. Реализовать архивацию


Part 4
SOAP, REST, получение данных с помощью Jersey (на занятии мы получали текущую погоду в виде JSON с forecast.io).
Домашнее задание -  получать XML или JSON данные с новостных сайтов (если XML то через RSS),
обрабатывать их с помощью JAXB, Jackson или MOXy (я так понял нужно это делать с аннотациями) и показывать на нашем
 новостном сайте.
Не использовать потоковую обработку XML/JSON - т.е. идти через создание отдельного класса с аннотациями @XMLRootElement (on class),
@XMLPath(on field).
задание именно про RSS (и посему XML) и MOXy


Задание: сделать поле текстового поиска по новостям на текущей странице. Т.е. когда вы вводите несколько букв в это поле,
jquery пробегает по всем текстовым блокам и подсвечивает эти буквы за счет обертывания их в span с нужным CSS классом

Part 5

Домашнее задание: Переделать сайт в Single-page application, сделать аудио-файл который непрерывно проигрываетися
при переходах по ссылкам.
*****
ответ спрятан в том как работает url matching
например: servlet container prefers exact match over wildcard match
соответственно можно написать один сервлет (PageServlet в вашем примере),
который отвечает на все запросы кроме тех, на которые отвечают более специфичные сервлеты

PageServlet “/**”
NewsViewServlet “/view/news”
ArchiveViewServlet “/view/archive"
Примеры запросов и кем они будут обработаны:
“/news” -> PageServlet
“/abra/cadabra/hocus/pocus.html” -> PageServlet
“/view/news” -> NewsViewServlet